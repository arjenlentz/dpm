PRACTICE:

construct lua userdata object for connection structures
pass userdata connection object into lua on creation. close connection on __gc.
construct handshake/auth packet objects for lua
pass handshake/auth into lua via callbacks
need a "verify" conn obj method that barfs if client conn was closed
WORK # write helper routines to serialize/deserialize length coded binaries
WORK # write deserialize for fields and rows
write packet-free routines. Clean up the memory leak I created.
intercept and set flags properly for compression/prepare support disabling
WORK ## implement mysql's password crypto handshake
learn to handle large mysql packets (at least identify them, and bomb saying
they're not supported)
move con and definition structures to toast.h
look up TCP options.. SO_KEEPALIVE, SO_LINGER, etc
more libevent infrastructure; timers
memory management; caching connection shit. malloc big range. reuse buffers.
write a makefile
not all of the state machine names make sense; clean it up.
if buffer grows too big, shrink it after completing a write/read
use struct buffer sizes from mysql_com.h

DONE ### fix username reading; add +1 to my_size so it gets the \0
DONE ### use multiple .c files to make the program.
DONE ### pull in as many GPL'ed defines as possible, write own for others.
DONE ### create packet header with a ptype enum, func ptr to free, tobuf, tolua/fromlua
DONE ### redo packet state machine to do proper state transitions when packets are _sent_ to a remote host.
DONE ### figure out how to free if (ptr == NULL) { don'tfree } correctly
DONE ### set libevent to listen on socket with callback, accept sockets.
DONE ### signal ignore sigpipe
DONE ### handle reading data on socket, printing locally.
DONE ### handle SIGHUP
DONE ### handle writing data back to socket
NAH  ### try basic ragel implementation to handle reading/writing commands
WORK # embed lua; pass input commands to lua, allow callback to set config vars
DONE ### proper read/write buffering for event sockets.
DONE ### outbound connection support. non-block connect()
DONE ### Full proxy support; must recognize mysql packets?
DONE ### write buffer resizing for large packets.
DONE ### (fixed some nice bugs) test running two connections at once
DONE ### learn about the authentication packets. print out the known data.
