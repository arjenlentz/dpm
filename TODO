Blockers for release-2:

- (after release) gitweb.cgi setup
- write demos for pass through, 1:1, conn pooling.

Blockers for release-3:

- ability to fully modify, luaize, and return custom query resultsets
  - real parsing/objects for field packets
  - real parsing/objects for row packets
  - eof/etc
  - any lua related issues here?
- Pass internal defines up into lua from within the C program, if possible.
- report "real" thread back to client during connect? Or rewrite when
  necessary.
- need a "verify" conn obj method that barfs if client conn was closed
- don't allow connecting a backend if the conn is invalid
- better mechanism for detecting closed conn?
- learn to handle large mysql packets (at least identify them, and bomb saying
  they're not supported)

Blockers for release-4:

- standard lua modules: 1) backend connect 2) client accept 3) passthrough
- func find the id of an attached remote for a connection object in lua.
- pick one code style to clean up, and clean it.
- support at least COM_CHANGE_USER, COM_PING
- cleaner lua, more demos or libraries.
- start test package (perl TAP? Probably).
- should be able to handle resultset packets? Roadmap it at least.

Blockers for release-5:

- port to at least one other OS (OpenBSD?)
- at least two more packet types
- TBD

WORK # write helper routines to serialize/deserialize length coded binaries
WORK # write deserialize for fields and rows
can probably force "max buffer size" of MAX_PACKET_SIZE. write some logic for
look up TCP options.. SO_KEEPALIVE, SO_LINGER, etc
more libevent infrastructure; timers
memory management; caching connection structs. malloc big range. reuse buffers.
not all of the state machine names make sense; clean it up.
if buffer grows too big, shrink it after completing a write/read
needs make-foo at some point. I tried, too lazy.
non-parsing proxy mode to support a list of modes? any bugs?
parsing code for COM_STATISTICS

DONE ### support the COM_STATISTICS result packet, so \s works.
DONE ### Non-parsing "proxy" mode (optional)
DONE ### (start to) write packet-free routines. Clean up the memory leak I
         created. '__gc' verified as working.
DONE ### Shut up the verbosity. Add -v or -d flag to make some of it come back
DONE ### getopt support for specifying lua startup file
DONE ### Garbage collect packets
DONE ### Strings are mutable
DONE ### Create command packet so lua may at least inspect in-flight SQL
DONE ### Really need a callback on handle_close, feels like a bug without it.
DONE ### implement mysql's password crypto handshake
DONE ### use struct buffer sizes from mysql_com.h
DONE ### flesh out obj_index to handle read/write correctly.
DONE ### add read/write defines
DONE ## create working accessors for int, uint64_t, uint32_t, enum flag, bit flag
WORK ## create working accessors for uint16_t, uint8_t, null terminated strings
WORK ## create working accessor for length encoded strings
WORK ## attach __gc methods to free objects
DONE ### move con and definition structures to toast.h
DONE ### fix username reading; add +1 to my_size so it gets the \0
DONE ### use multiple .c files to make the program.
DONE ### pull in as many GPL'ed defines as possible, write own for others.
DONE ### create packet header with a ptype enum, func ptr to free, tobuf, tolua/fromlua
DONE ### redo packet state machine to do proper state transitions when packets are _sent_ to a remote host.
DONE ### figure out how to free if (ptr == NULL) { don'tfree } correctly
DONE ### set libevent to listen on socket with callback, accept sockets.
DONE ### signal ignore sigpipe
DONE ### handle reading data on socket, printing locally.
DONE ### handle SIGHUP
DONE ### handle writing data back to socket
NAH  ### try basic ragel implementation to handle reading/writing commands
WORK # embed lua; pass input commands to lua, allow callback to set config vars
DONE ### proper read/write buffering for event sockets.
DONE ### outbound connection support. non-block connect()
DONE ### Full proxy support; must recognize mysql packets?
DONE ### write buffer resizing for large packets.
DONE ### (fixed some nice bugs) test running two connections at once
DONE ### learn about the authentication packets. print out the known data.
