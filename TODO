PRACTICE:

DONE ### set libevent to listen on socket with callback, accept sockets.
DONE ### signal ignore sigpipe
DONE ### handle reading data on socket, printing locally.
DONE ### handle SIGHUP
DONE ### handle writing data back to socket
NAH  ### try basic ragel implementation to handle reading/writing commands
WORK # embed lua; pass input commands to lua, allow callback to set config vars
DONE ### proper read/write buffering for event sockets.
DONE ### outbound connection support. non-block connect()
DONE ### Full proxy support; must recognize mysql packets?
DONE ### write buffer resizing for large packets.
DONE ### (fixed some nice bugs) test running two connections at once
if buffer grows too big, shrink it after completing a write/read
learn about the authentication packets. print out the known data.
learn to handle large mysql packets (at least identify them, and bomb saying
they're not supported)
shuffle functions to be more in order
move run_protocol and mysql specific 'stuff' to mysql.c
move con and definition structures to toast.h
look up TCP options.. SO_KEEPALIVE, SO_LINGER, etc
see about implementing mysql protocol (as a server)
see about working mysql protocol (as a client)
(how much can be done in lua? perhaps?)
more libevent infrastructure; timers
memory management; caching connection shit. malloc big range. reuse buffers.
use multiple .c files to make the program.
write a makefile
readv/writev for read/write iovecs? learn how to use scatter/gather
